# Generated by Django 5.0.8 on 2025-08-06 15:47

import django.core.validators
import django.db.models.deletion
import videos.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Vidéo de présentation', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('video_file', models.FileField(blank=True, null=True, upload_to=videos.models.video_upload_path)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='thumbnails/')),
                ('duration', models.FloatField(blank=True, help_text='Durée en secondes', null=True)),
                ('file_size', models.BigIntegerField(blank=True, help_text='Taille en bytes', null=True)),
                ('format', models.CharField(blank=True, max_length=10, null=True)),
                ('resolution', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('processing', 'En traitement'), ('completed', 'Terminée'), ('failed', 'Échec')], default='draft', max_length=20)),
                ('overall_quality_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recorded_at', models.DateTimeField(blank=True, null=True)),
                ('linked_to_cv', models.BooleanField(default=False)),
                ('cv_update_suggested', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vidéo de présentation',
                'verbose_name_plural': 'Vidéos de présentation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecordingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('instructions_shown', models.JSONField(blank=True, default=list)),
                ('instructions_completed', models.JSONField(blank=True, default=list)),
                ('total_attempts', models.IntegerField(default=1)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('device_settings', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('video', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recording_session', to='videos.video')),
            ],
            options={
                'verbose_name': "Session d'enregistrement",
                'verbose_name_plural': "Sessions d'enregistrement",
            },
        ),
        migrations.CreateModel(
            name='VideoAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('face_detection_accuracy', models.FloatField(blank=True, null=True)),
                ('lighting_variance', models.FloatField(blank=True, null=True)),
                ('audio_peak_level', models.FloatField(blank=True, null=True)),
                ('positioning_score', models.FloatField(blank=True, null=True)),
                ('encoding_quality', models.CharField(blank=True, max_length=20)),
                ('compression_ratio', models.FloatField(blank=True, null=True)),
                ('view_count', models.IntegerField(default=0)),
                ('download_attempts', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('video', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='videos.video')),
            ],
            options={
                'verbose_name': 'Analytics vidéo',
                'verbose_name_plural': 'Analytics vidéos',
            },
        ),
        migrations.CreateModel(
            name='QualityCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_type', models.CharField(choices=[('face', 'Détection faciale'), ('lighting', 'Éclairage'), ('audio', 'Niveau audio'), ('positioning', 'Positionnement')], max_length=20)),
                ('status', models.CharField(choices=[('checking', 'En cours'), ('success', 'Succès'), ('warning', 'Attention'), ('error', 'Erreur')], default='checking', max_length=10)),
                ('score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('message', models.CharField(blank=True, max_length=200)),
                ('technical_details', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_checks', to='videos.video')),
            ],
            options={
                'verbose_name': 'Test qualité',
                'verbose_name_plural': 'Tests qualité',
                'ordering': ['-created_at'],
                'unique_together': {('video', 'check_type')},
            },
        ),
    ]
